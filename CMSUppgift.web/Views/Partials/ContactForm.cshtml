@model  CMSUppgift.core.ViewModel.ContactFormViewModel
@using CMSUppgift.core.Controllers
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@*<script src="https://www.google.com/recaptcha/api.js?render=@Model.RecaptchaSiteKey"></script>*@

@*<script>
        grecaptcha.ready(function () {
            grecaptcha.execute('@Model.RecaptchaSiteKey',
                { action: 'contact_us' })
                .then(function (token) { $('#GoogleCaptchaToken').val(token) });
        })
    </script>*@
<script type="text/javascript">
    var onloadCallback = function () {
        grecaptcha.render('html_element', {
            'sitekey': '@Model.RecaptchaSiteKey'
        });
    };
</script>
@if ((string)TempData["status"] == "OK")
{
    <div class="container">
        <div class="row">
            <div class="col text-center p-5">
                <i class="far fa-5x fa-thumbs-up"></i>
                <div>Thanks. Your comment was posted!</div>
            </div>
        </div>
    </div>
}
else
{
    using (Html.BeginUmbracoForm<ContactController>("HandleContactForm"))
    {
        @Html.ValidationSummary()
        @Html.AntiForgeryToken()
        <div id="html_element"></div>
        <div class="form-group">
            <label for="your-name-textbox">Your Name *</label>
            <span class="field-validation-valid" data-valmsg-for="Name" data-valmsg.replace="true"></span>
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control form-control-lg", placeholder = "Your Name", maxlength = "80" })
        </div>
        <div class="form-group">
            <label for="your-email-textbox">Your Email *</label>
            <span class="field-validation-valid" data-valmsg-for="Email" data-valmsg.replace="true"></span>
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control form-control-lg", placeholder = "Your Email" })
        </div>
        <div class="form-group">
            <label for="your-subject-textbox">Subject *</label>
            <span class="field-validation-valid"></span>
            @Html.TextBoxFor(m => m.Subject, new { @class = "form-control form-control-lg", placeholder = "Subject" })
        </div>
        <div class="form-group">
            <label for="your-comment-textbox">Your Comment</label>
            <span class="field-validation-valid"></span>
            @Html.TextAreaFor(m => m.Comment, new { @class = "form-control form-control-lg", placeholder = "Your Comment" })
        </div>

        <div class="form-group">
            <button class="btn btn-primary" type="submit">Send</button>
        </div>
        <script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit"
                async defer>
        </script>
    }
}
